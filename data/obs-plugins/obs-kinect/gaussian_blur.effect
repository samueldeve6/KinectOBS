uniform float4x4 ViewProj;
uniform texture2d Image;
uniform float2 Filter;
uniform float2 InvImageSize;

sampler_state textureSampler {
	Filter   = Linear;
	AddressU = Clamp;
	AddressV = Clamp;
};

struct VertData {
	float4 pos : POSITION;
	float2 uv : TEXCOORD0;
};

VertData VSDefault(VertData vert_in)
{
	VertData vert_out;
	vert_out.pos = mul(float4(vert_in.pos.xyz, 1.0), ViewProj);
	vert_out.uv = vert_in.uv;
	return vert_out;
}

float4 PSColorFilterRGBA(VertData vert_in) : TARGET
{
#ifdef _OPENGL
	const float KernelOffsets[3] = float[3](0.0f, 1.3846153846f, 3.2307692308f);
	const float BlurWeights[3] = float[3](0.2270270270f, 0.3162162162f, 0.0702702703f);
#else
	static const float KernelOffsets[3] = { 0.0f, 1.3846153846f, 3.2307692308f };
	static const float BlurWeights[3] = { 0.2270270270f, 0.3162162162f, 0.0702702703f };
#endif

	/* Grab the current pixel to perform operations on. */
	float3 color = Image.Sample(textureSampler, vert_in.uv).xyz * BlurWeights[0];

	for (int i = 1; i < 3; ++i)
	{
		float2 offset = InvImageSize * Filter * KernelOffsets[i];
		color += BlurWeights[i] * (Image.Sample(textureSampler, vert_in.uv + offset).xyz +
		                           Image.Sample(textureSampler, vert_in.uv - offset).xyz);
	}

	return float4(color, 1.0);
}

technique Draw
{
	pass
	{
		vertex_shader = VSDefault(vert_in);
		pixel_shader = PSColorFilterRGBA(vert_in);
	}
}
